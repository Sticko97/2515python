    #make it so it displays orders?
    # def show_message(self):
    #     if self.check_state.get() == 0:
    #         #index "1.0" is the start of the string
    #         print(self.textbox.get("1.0", tk.END))
    #     else:
    #         messagebox.showinfo(title="Message", message=self.textbox.get("1.0", tk.END))
    
    # #create or connect to a database
# conn = db.connect("store.db")
# #create a cursor
# cursor = db.conn.cursor()
# #create tables
# cursor.execute('''
#           CREATE TABLE Product
#           (name VARCHAR(20) PRIMARY KEY ASC,
#            price REAL NOT NULL,
#            quantity INTEGER NOT NULL
#           )
#           ''')
# #commit changes
# conn.commit()
# #close connection
# conn.close()

        # if response.status_code == 200:
        #     products = response.json()
        #     # products = Product.query.all()
        #     # With tk.Toplevel create a new window to display the products 
        #     storage_window = tk.Toplevel(self.root)
        #     storage_window.title("All Products")
        #     # Create a label and a listbox to display the products
        #     label = tk.Label(storage_window, text="All Products", font=("Arial", 18))
        #     label.pack(padx=10, pady=10)
        #     listbox = tk.Listbox(storage_window, font=("Arial", 16))
        #     listbox.pack(padx=10, pady=10)
        #     for product in products:
        #         # add each product to the listbox
        #         listbox.insert(tk.END, f"{products['name']} - ${product['price']} - Quantity: {product['quantity']}")
        # else:
        #     messagebox.showerror("Error", f"Error retrieving products from the database: {response.text}")

# class MyGUI:
    
#     def __init__(self):
#         #initialize tk
#         self.root = tk.Tk()
#         #Set title for GUI
#         self.root.title("Shop Database GUI")
#         self.buttonframe = tk.Frame(self.root)
#         # self.buttonframe.columnconfigure(0, weight=1)
#         # self.buttonframe.columnconfigure(1, weight=1)
#         # self.buttonframe.columnconfigure(2, weight=1)
#         # self.buttonframe.columnconfigure(3, weight=1)
#         # self.buttonframe.columnconfigure(4, weight=1)
        
#         #navbar, things like file menu
#         self.menubar = tk.Menu(self.root)
#         self.filemenu = tk.Menu(self.menubar, tearoff=0)
#         # self.filemenu.add_command(label="New", command=self.on_closing)
#         # self.filemenu.add_command(label="View", command=self.on_closing)
#         self.filemenu.add_separator()
#         self.root.config(menu=self.menubar)
#         #Navbar file names e.g file, new, insert
#         self.menubar.add_cascade(menu=self.filemenu, label="Filez")

        #state of the textbox, need "variable=self.check_state"
        #Can turn this into a view type of element~~~
        #Check Button
        # self.check_state = tk.IntVar()
        # self.check = tk.Checkbutton(self.root, text="show messagebox", font=("Arial", 12), variable=self.check_state)
        # self.check.pack(padx=10,pady=10)

        #Clear button
        # self.clearButton = tk.Button(self.root,text="clear", command=self.clear)
        # self.clearButton.pack(padx=10, pady=10)
        
        # self.createOrder = tk.Button(self.root,text="Create Order", command=self.create_order)
        # self.createOrder.pack(padx=10, pady=10)
        # self.customer_name = tk.Entry(self.root, font=("Arial", 16))
        # self.customer_name.pack(padx=10, pady=10)
        # self.customer_address = tk.Entry(self.root, font=("Arial", 16))
        # self.customer_address.pack(padx=10, pady=10)
        # self.producttestbox = tk.Entry(self.root,font=("Arial", 16))
        # self.producttestbox.pack(padx=10, pady=10)
        
#         #Adding text to the GUI
#         self.label = tk.Label(self.root, text="Stanley Le A00961484", font=("Arial", 12))
#         self.label.pack(padx=10, pady=10)